Documentation of 7-base_geometry.py

- `def area(self)`:
  Calculates the area of the `BaseGeometry`.

- `def integer_validator(self, name, value)`:
  Validates the `value` based on specific criteria.

Test cases:
===========

>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> bg = BaseGeometry()

Positive value:
>>> bg.integer_validator("my_int", 12)
>>>

Negative value:
>>> bg.integer_validator("distance", -4)
Traceback (most recent call last):
ValueError: distance must be greater than 0

Float value:
>>> bg.integer_validator("year", 8.5)
Traceback (most recent call last):
TypeError: year must be an integer

Zero value:
>>> bg.integer_validator("age", 0)
Traceback (most recent call last):
ValueError: age must be greater than 0

Non-integer value:
>>> bg.integer_validator("name", "A!ex")
Traceback (most recent call last):
TypeError: name must be an integer

Boolean value:
>>> bg.integer_validator("width", True)
Traceback (most recent call last):
TypeError: width must be an integer

Catched output with string value:
>>> try:
...     bg.integer_validator("name", "John")
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
...
[TypeError] name must be an integer

Catched output with 0 as value:
>>> try:
...     bg.integer_validator("age", 0)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
...
[ValueError] age must be greater than 0

Negative value:
>>> try:
...     bg.integer_validator("distance", -4)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
...
[ValueError] distance must be greater than 0

Float value:
>>> try:
...     bg.integer_validator("distance", 4.5)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
...
[TypeError] distance must be an integer

Calling area function before implementation:
>>> bg.integer_validator("my_int", 12)
>>> bg.area()
Traceback (most recent call last):
Exception: area() is not implemented

None as value:
>>> bg.integer_validator("age", None)
Traceback (most recent call last):
TypeError: age must be an integer

No arguments provided:
>>> bg.integer_validator()
Traceback (most recent call last):
TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

No value provided:
>>> bg.integer_validator("year")
Traceback (most recent call last):
TypeError: integer_validator() missing 1 required positional argument: 'value'

Array as value:
>>> bg.integer_validator("day", [7, 3, 5])
Traceback (most recent call last):
TypeError: day must be an integer

Tuple as value:
>>> bg.integer_validator("day", (7, 3, 5))
Traceback (most recent call last):
TypeError: day must be an integer

Dictionary as value:
>>> bg.integer_validator("month", {"Jan", "Feb", "Mar"})
Traceback (most recent call last):
TypeError: month must be an integer